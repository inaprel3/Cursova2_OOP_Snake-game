{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\BodySnake.svelte",
    "..\\..\\Fruit.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Snake from \"./Snake.svelte\";\n  import Fruit from \"./Fruit.svelte\";\n  let bodiesSnake = [];\n  let fruitLeft = 0;\n  let fruitTop = 0;\n  let direction = \"right\";\n  $: score = bodiesSnake.length - 3;\n  class IsCollide {\n    isCollide(a, b) {\n      a.top < b.top ||\n      a.top > b.top ||\n      a.left < b.left ||\n      a.left > b.left\n    }\n  }\n  class MoveFruit {\n    moveFruit() {\n      fruitTop = Math.floor(Math.random() * 12) * 50;\n      fruitLeft = Math.floor(Math.random() * 26) * 50;\n    }\n  }\n  class ResetGame {\n    constructor() {\n      moveFruit();\n      direction = \"right\";\n      bodiesSnake = [ { left: 100, top: 0 }, \n        { left: 50, top: 0 },\n        { left: 0, top: 0 }\n      ];\n    }\n  }\n  class GetDirectionFromKeyCode {\n    getDirectionFromKeyCode(keyCode) {\n      if (keyCode === 38) { return \"up\"; }\n      else if (keyCode === 39) { return \"right\"; }\n      else if (keyCode === 37) { return \"left\"; }\n      else if (keyCode === 40) { return \"down\"; }\n      return false;\n    }\n  }\n  function onKeyDown(e) {\n    const newDirection = GetDirectionFromKeyCode(e.keyCode);\n    if (newDirection) {\n      direction = newDirection;\n    }\n  }\n  class IsGameOver {\n    isGameOver() {\n      const bodiesSnakeNoHead = bodiesSnake.slice(1);\n      const snakeCollisions = bodiesSnakeNoHead.filter(bs =>\n        isCollide(bs, bodiesSnake[0])\n      );\n      if (snakeCollisions.length > 0) { return true; }\n      const { top, left } = bodiesSnake[0];\n      if (top >= 600 || top < 0 || left < 0 || left >= 1300) { return true; }\n      return false;\n    }\n  }\n  setInterval(() => { \n    bodiesSnake.pop();\n    let { left, top } = bodiesSnake[0];\n    if (direction === \"up\") { top -= 50; } \n    else if (direction === \"right\") { left += 50; }\n    else if (direction === \"down\") { top += 50; }\n    else if (direction === \"left\") { left -= 50; }\n    const newHead = { left, top };\n    bodiesSnake = [newHead, ... bodiesSnake];\n    if (IsCollide(newHead, { left: fruitLeft, top: fruitTop })) {\n      MoveFruit();\n      bodiesSnake = [...bodiesSnake, bodiesSnake [bodiesSnake.length - 1]];\n    }\n    if (IsGameOver()) { ResetGame(); }\n  }, 200);\n  ResetGame();\n</script>\n<style>\n  main {\n    background-image: url(\"../cursova.jpg\");\n    background-size: cover;\n    width: 1300px;\n    height: 600px;\n    border: solid rgb(15, 69, 0) 5px;\n    position: relative;\n    margin: 20px auto;\n  }\n  h1 {\n    text-align: center;\n  }\n</style>\n<h1>SNAKE GAME, Score: {score}</h1>\n<main>\n  <Snake {direction} {bodiesSnake} />\n  <Fruit {fruitLeft} {fruitTop} />\n</main>\n<svelte:window on:keydown={onKeyDown} />",
    "<script>\n  export let direction = \"right\";\n  export let isHead = false;\n  export let top = 50;\n  export let left = 50;\n</script>\n<style>\n  .body-snake {\n    position: absolute;\n    background-color: rgb(128, 20, 178);\n    border: rgb(5, 55, 0) 3px solid;\n    border-radius: 60%;\n    width: 50px;\n    height: 50px;\n    z-index: 4;\n  }\n  .eyes {\n    position: absolute;\n    background-color: rgb(255, 217, 0);\n    border-radius: 60%;\n    width: 25%;\n    height: 25%;\n  }\n  #rightEye {\n    left: 75%;\n    bottom: 20%;\n  }\n  #leftEye {\n    left: 75%;\n    top: 20%;\n  }\n  .body-snake.up {\n    transform: rotate(250deg);\n  }\n  .body-snake.right {\n    transform: rotate(10deg);\n  }\n  .body-snake.down {\n    transform: rotate(80deg);\n  }\n  .body-snake.left {\n    transform: rotate(150deg);\n  }\n</style>\n<div style=\"left: {left}px; top: {top}px;\" class=\"body-snake {direction}\">\n  {#if isHead}\n    <div id=\"rightEye\" class=\"eyes\" />\n    <div id=\"leftEye\" class=\"eyes\" />\n  {/if}\n</div>",
    "<script>\n  export let fruitTop;\n  export let fruitLeft;\n</script>\n<style>\n  .fruit {\n    position: absolute;\n    border: solid black 2px;\n    background-color: rgb(255, 0, 85);\n    width: 50px;\n    height: 50px;\n    z-index: 0;\n  }\n</style>\n<div class=\"fruit\" style=\"left: {fruitLeft}px; top: {fruitTop}px\" />"
  ],
  "names": [],
  "mappings": "AA6EE,IAAI,eAAC,CAAC,AACJ,gBAAgB,CAAE,IAAI,gBAAgB,CAAC,CACvC,eAAe,CAAE,KAAK,CACtB,KAAK,CAAE,MAAM,CACb,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAChC,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC,AACD,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,MAAM,AACpB,CAAC;ACjFD,WAAW,eAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,CAClB,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CACnC,MAAM,CAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAC/B,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,KAAK,eAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAClC,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACb,CAAC,AACD,SAAS,eAAC,CAAC,AACT,IAAI,CAAE,GAAG,CACT,MAAM,CAAE,GAAG,AACb,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,AACV,CAAC,AACD,WAAW,GAAG,eAAC,CAAC,AACd,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACD,WAAW,MAAM,eAAC,CAAC,AACjB,SAAS,CAAE,OAAO,KAAK,CAAC,AAC1B,CAAC,AACD,WAAW,KAAK,eAAC,CAAC,AAChB,SAAS,CAAE,OAAO,KAAK,CAAC,AAC1B,CAAC,AACD,WAAW,KAAK,eAAC,CAAC,AAChB,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC;ACrCD,MAAM,eAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CACvB,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CACjC,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,CAAC,AACZ,CAAC"
}